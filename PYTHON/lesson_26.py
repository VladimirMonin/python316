"""
Lesson 26
13.04.2024
assert
магические методы в ООП
__init__ - инициализатор конструктора
__new__ - создание объекта в конструкторе
__str__ - строковое представление объекта
__repr__ - служебное строковое представление объекта
__len__ - длина объекта
__call__ - вызов объекта
__bool__ - логическое значение объекта
Сравнение
__eq__ - равенство (сокращение от equal)
__ne__ - неравенство (сокращение от not equal)
__lt__ - меньше (сокращение от less than)
__gt__ - больше (сокращение от greater than)
__le__ - меньше или равно (сокращение от less or equal)
__ge__ - больше или равно (сокращение от greater or equal)

Декоратор который сгенерерирует все магические методы сравнения
@total_ordering
Для него достаточно описать только __eq__ и __lt__ 
или __eq__ и __gt__ методы



Декоратор @dataclass в Python, встроенный в модуль dataclasses, упрощает создание классов, 
автоматически генерируя специальные методы, такие как __init__, __repr__, __eq__ и другие. 

По умолчанию @dataclass генерирует следующие методы:

__init__ — метод инициализации, который автоматически принимает аргументы со значениями по умолчанию, 
соответствующими аннотациям типов полей класса.
__repr__ — метод представления, который возвращает строку, представляющую экземпляр класса.
__eq__ — метод сравнения на равенство, который позволяет сравнивать экземпляры на основе их полей.
Кроме того, вы можете настроить @dataclass для автоматической генерации дополнительных методов сравнения:

__lt__, __le__, __gt__, __ge__ — методы для операций меньше, меньше или равно, больше и больше или равно 
соответственно. Для их включения нужно установить параметр order=True при декларации @dataclass.



Математические операции
__add__ - сложение (сокращение от addition)
__sub__ - вычитание (сокращение от subtraction)
__mul__ - умножение (сокращение от multiplication)
__truediv__ - деление (сокращение от true division)
__floordiv__ - целочисленное деление (сокращение от floor division)
__mod__ - остаток от деления (сокращение от modulo)
__pow__ - возведение в степень (сокращение от power)
__round__ - округление
__abs__ - модуль числа

Инплейс операции
__iadd__ - сложение с присваиванием (сокращение от in-place addition)
__isub__ - вычитание с присваиванием (сокращение от in-place subtraction)
__imul__ - умножение с присваиванием (сокращение от in-place multiplication)
__itruediv__ - деление с присваиванием (сокращение от in-place true division)
__ifloordiv__ - целочисленное деление с присваиванием (сокращение от in-place floor division)
__imod__ - остаток от деления с присваиванием (сокращение от in-place modulo)
__ipow__ - возведение в степень с присваиванием (сокращение от in-place power)

"""
from dataclasses import dataclass, field


@dataclass(order=True)
class Singer:
    cots: int
    name: str = field(compare=False, default='Городый обладатель шуб')
    


actor1 = Singer(100)
actor2 = Singer(95, 'Басков')
actor3 = Singer(10, 'Моргенштерн')

print(f'{actor1 > actor2=}')
print(f'{actor1 > actor3=}')
print(f'{actor1 < actor3=}')