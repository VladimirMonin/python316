"""
Lesson 27
14.04.2024

Математические операции
__add__ - сложение (сокращение от addition)
__sub__ - вычитание (сокращение от subtraction)
__mul__ - умножение (сокращение от multiplication)
__truediv__ - деление (сокращение от true division)
__floordiv__ - целочисленное деление (сокращение от floor division)
__mod__ - остаток от деления (сокращение от modulo)
__pow__ - возведение в степень (сокращение от power)
__round__ - округление
__abs__ - модуль числа

Инплейс операции
__iadd__ - сложение с присваиванием (сокращение от in-place addition)
__isub__ - вычитание с присваиванием (сокращение от in-place subtraction)
__imul__ - умножение с присваиванием (сокращение от in-place multiplication)
__itruediv__ - деление с присваиванием (сокращение от in-place true division)
__ifloordiv__ - целочисленное деление с присваиванием (сокращение от in-place floor division)
__imod__ - остаток от деления с присваиванием (сокращение от in-place modulo)
__ipow__ - возведение в степень с присваиванием (сокращение от in-place power)
"""

# Прощупаем разницу между + и +=

a = [1, 2, 3]
print('ID до операции:', id(a))
a += [4, 5]
print('a после += операции:', a)
print('ID после операции:', id(a))

# Теперь попробуем сделать тоже самое, но с помощью +, а не +=

b = [1, 2, 3]
print('ID до операции:', id(b))
c = a + [4, 5]
print('c после + операции:', c)
print('ID после операции:', id(c))

b += [44444, 5]
c += [4, 55555]

print('b после += операции:', b)
print('c после + операции:', c)

"""
При использовании += список меняется внутри, 
а при использовании + создается новый экземпляр списка (похоже на копирование списка)

При этом, они будут иметь разные ID, и жить своей жизнью
"""