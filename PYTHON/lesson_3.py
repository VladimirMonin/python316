"""
Lesson 3: Ветвления
30.12.2023
- блок-схемы
- условный оператор if
- сокращенный вариант if
- разница между if и if-elif
- if - elif - else
- методы строк

"""

# Блок-схемы
# TODO - Практика!
"""
начало
Нарисуйте блок-схему алгоритма празднования Нового Года!
пользовательский ввод: пойдем в гости?
если да:
- купить коньяк и торт!
если нет:
- заказать суши и смотреть сериалы!
конец
"""

# Условный оператор if - если
# if условие:
#     блок кода
# else:
#     блок кода

# if True:
#     print('Условие истинно!')
# else:
#     print('Условие ложно!')
#
# if ' ':
#     print('Условие истинно!')
# else:
#     print('Условие ложно!')
#
# # TODO - Практика!
# """
# Напишите программу, в соответствии с
# блок-схемой из предыдущего задания!
# 1. Пользовательский ввод (input)
# 2. Условный оператор if пользовательский ввод == да
# 3. Ветвление с принтами.
# """
#
# is_going_to_visit = input('Пойдем в гости? (да/нет): ').lower()
#
# if is_going_to_visit in 'да наверно':
#     print('Купить коньяк и торт!')
# elif is_going_to_visit in 'нет новерно':
#     print('Заказать суши и смотреть сериалы!')
# elif is_going_to_visit in "наверно":
#     print('Подумать и решить!')
# else:
#     print('Ничего не делать!')
#
# # Более сложное ветвление. Идем в гости или нет? Каков бюджет?
#
# is_going_to_visit = input('Пойдем в гости? (да/нет): ').lower()
# budget = int(input('Каков бюджет? (руб): '))
# products_to_visit = ['коньяк', 'торт', 'фрукты', 'фейерверк', 'мега-сет суши']
# products_to_home = ['шаверма', 'вино', 'суши', 'фейерверк']
#
# if is_going_to_visit == 'да':
#     if 1000 <= budget <= 2000:
#         print(f'Мы можем позволить себе купить:\n'
#               f'{' '.join(products_to_visit[:1]).capitalize()}')
#     elif 2000 < budget <= 3000:
#         print(f'Мы можем позволить себе купить:\n'
#               f'{" ".join(products_to_visit[:2]).capitalize()}')
#
#     elif 3000 < budget <= 4000:
#         print(f'Мы можем позволить себе купить:\n'
#               f'{" ".join(products_to_visit[:3]).capitalize()}')
#
#     elif 4000 < budget <= 6000:
#         print(f'Мы можем позволить себе купить:\n'
#               f'{" ".join(products_to_visit[:4]).capitalize()}')
#
#     elif 6000 < budget <= 10000:
#         print(f'Мы можем позволить себе купить:\n'
#               f'{" ".join(products_to_visit[:5]).capitalize()}')
#
#     elif budget > 10000:
#         print(f'Мы можем позволить себе купить:\n'
#               f'{" ".join(products_to_visit).capitalize()}')
#
#     else:
#         print('Возможно, что лучше остаться дома...')
#
# elif is_going_to_visit == 'нет':
#     if 1000 <= budget <= 2000:
#         print(f'Мы можем позволить себе купить:\n'
#               f'{" ".join(products_to_home[:1]).capitalize()}')
#     elif 2000 < budget <= 3000:
#         print(f'Мы можем позволить себе купить:\n'
#               f'{" ".join(products_to_home[:2]).capitalize()}')
#
#     elif 3000 < budget <= 4000:
#         print(f'Мы можем позволить себе купить:\n'
#               f'{" ".join(products_to_home[:3]).capitalize()}')
#
#     elif 4000 < budget <= 6000:
#         print(f'Мы можем позволить себе купить:\n'
#               f'{" ".join(products_to_home[:4]).capitalize()}')
#
#     elif budget > 6000:
#         print(f'Мы можем позволить себе купить:\n'
#               f'{" ".join(products_to_home).capitalize()}')
#
#     else:
#         print('Похоже что это будет грустный вечер...')
#
# else:
#     print('Ошибка - ошибка - ошибка!')

# Строки - упорядоченная, неизменяемая, итерируемая последовательность символов
# Индексация
some_str = 'Это строка!'
print(some_str[0])
# some_str[0] = 'ё'

print(some_str[1])
print(some_str[-1])

print(some_str[4] + some_str[5] + some_str[6])

# Срезы (slices)
# some_str[start:stop:step]
print(some_str[4:7])
print(some_str[::])
print(some_str[2:])
print(some_str[:5])
print(some_str[::2])
print(some_str[::-1].lower())

# Проверка на палиндром
some_str = 'Аргентина манит негра'
print(
    f'Введенная вами строка является палиндромом: {some_str.lower().replace(" ", "") == some_str[::-1].lower().replace(" ", "")}')

# Методы строк
# .lower() - приводит строку к нижнему регистру
# .replace('что меняем', 'на что меняем') - заменяет подстроку в строке
# .split("разделитель") - разделяет строку на список строк по разделителю
# " + ".join() - объединяет список строк в одну строку с разделителем [1, 2, 3] -> "1 + 2 + 3"
# .upper() - приводит строку к верхнему регистру
# .capitalize() - приводит первый символ строки к верхнему регистру
# .title() - приводит первый символ каждого слова к верхнему регистру
# .strip() - удаляет пробельные символы, а также символы \n \t \r в начале и конце строки
# .count() - считает количество вхождений подстроки в строку
# .startswith() - проверяет, начинается ли строка с подстроки
# .endswith() - проверяет, заканчивается ли строка подстрокой
# .find() - возвращает индекс первого вхождения подстроки в строку
# .index() - возвращает индекс первого вхождения подстроки в строку
# .isalpha() - проверяет, состоит ли строка из букв
# .isdigit() - проверяет, состоит ли строка из цифр
# .isalnum() - проверяет, состоит ли строка из цифр или букв
# .isspace() - проверяет, состоит ли строка из пробельных символов
# .istitle() - проверяет, начинаются ли слова в строке с заглавной буквы
# .islower() - проверяет, состоит ли строка из символов в нижнем регистре
# .isupper() - проверяет, состоит ли строка из символов в верхнем регистре
# .istitle() - проверяет, начинаются ли слова в строке с заглавной буквы
# .rfind() - возвращает индекс последнего вхождения подстроки в строку
# .rindex() - возвращает индекс последнего вхождения подстроки в строку
# .format() - форматирует строку
# .isascii() - проверяет, состоит ли строка из символов ASCII
# .swapcase() - меняет регистр всех символов строки на противоположный


city = "москва"
city2 = "санкт петербург"
city3 = "санкт-петербург"

print(city.capitalize())
print(city2.capitalize())
print(city3.capitalize())

print(city.title())
print(city2.title())
print(city3.title())

# Пример
poem = """
Шел Джон через реку,
Видит Джон - в реке рак.
Сунул Джон руку в реку,
Рак за руку Джона цап.

PS
Рак, был джонов
"""

# Сколько раз встречается слово Джон?
print(poem.count('Джон'))

# Сколько раз встречается слово Джон на самом деле?
print(poem.lower().count('джон'))
print(poem.count('джон'))

# Допустим нам надо очистить урлы
url = 'https://www.google.com/search?q=python+string+methods&oq=python+string+methods&aqs=chrome..69i57j0l9.10160j0j7&sourceid=chrome&ie=UTF-8'

# google.com
clear = url.lstrip('https://').split('/')[0]
print(clear)

# Проверка юзернейма
"""
Юзернейм не может содержать спецсимволы, числа и пробелы.
"""

username = " "

bad_report_string = ""

if not username.isalnum():
    bad_report_string += "Юзернейм содержит спецсимволы. "

if username.isdigit():
    bad_report_string += "Юзернейм содержит цифры. "

if username.isspace():
    bad_report_string += "Юзернейм содержит пробелы. "

if bad_report_string:
    print(f'Юзернейм "{username}" не подходит. {bad_report_string}')

else:
    print(f'Юзернейм "{username}" подходит!')
