"""
Lesson 2
24.12.2023
Повторение материала
Математические операции
Round
Форматирование строк (округление)
Отладочная строка
Операции сравнения
Логические операции
Приоритет операций
Комбинированные операции (сравнения и логические)
pep-8
python zen
Сравнение строк
"""
# Математические операции в Python
# Сложение +
# Сложение in-place +=
# Вычитание -
# Вычитание in-place -=
# Умножение *
# Умножение in-place *=
# Деление /
# Деление in-place /=
# Целочисленное деление //
# Целочисленное деление in-place //=
# Возведение в степень **
# Возведение в степень in-place **=
# Остаток от деления %
# Остаток от деления in-place %=

a = 3
b = 2

# Обычный принт для проверки значений
print(f'Тип переменной a: {type(a)}')
print(f'Тип переменной b: {type(b)}')
print('Сумма a и b:', a + b)

# Отладочная строка
# Сокращенный синтаксис f-строки
print(f'{type(a)=}')

# Математические операции
print(f'{a +b=}')  # Комментарий
print(f'{a - b=}')
print(f'{a * b=}')  # Комментарий
print(f'{a / b=}')  # Комментарий
print(f'{a // b=}')
print(f'{a % b=}')
print(f'{a ** b=}')

b = b + 1
b += 1

print(b)

# Операции сравнения
# Равно ==  без пробелов = =
# Не равно без пробелов != = !
# Меньше <
# Больше >
# Меньше или равно <= < =
# Больше или равно >= > =

a = 2
b = 2

print(f'{a == b=}')
print(f'{a != b=}')
print(f'{a < b=}')
print(f'{a > b=}')
print(f'{a <= b=}')
print(f'{a >= b=}')

a = 10
b = 5
c = 2
print(f'{a > b > c=}')

# todo: Практика
"""
Можем ли мы выдать пользователю права?
Минимальный порог 18 лет
Максимальный порог 90 лет
Пожалуйста введите ваш возраст
Принт: Результат проверки: True/False
"""
MIN_AGE_THRESHOLD = 18
MAX_AGE_THRESHOLD = 90

user_age_input = int(input('Пожалуйста введите ваш возраст: '))

print(f'Результат проверки: {MIN_AGE_THRESHOLD <= user_age_input <= MAX_AGE_THRESHOLD}')

# Логические операции в порядке приоритета
# ( ) скобки - группировка условий - высший приоритет
# not - отрицание
# and - логическое И
# or - логическое ИЛИ

check_result = user_age_input >= MIN_AGE_THRESHOLD and user_age_input <= MAX_AGE_THRESHOLD

# and - логическое И
# true and true = true
# true and false = false
# false and true = false
# false and false = false

# or - логическое ИЛИ
# true or true = true
# true or false = true
# false or true = true
# false or false = false

# not - отрицание
# not true = false
# not false = true

# ( ) - скобки - группировка условий - высший приоритет
# true and not true and false = false
# true and not (true and false) = true


my_string = ('lorem ipsum lorem ipsum lorem ipsum lorem '
             'ipsum lorem ipsum lorem ipsum lorem ipsum lorem '
             'ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum'
             ' lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum ')

# pep-8 - рекомендации по стилю кода
# python zen - философия python

"""
    Красивое лучше уродливого.
    Явное лучше неявного.
    Простое лучше сложного.
    Сложное лучше запутанного.
    Развернутое лучше вложенного.
    Разреженное лучше плотного.
    Читаемость имеет значение.
    Особые случаи не настолько особые, чтобы нарушать правила.
    При этом практичность важнее безупречности.
    Ошибки не должны замалчиваться.
    Если не замалчиваются явно.
    Встретив двусмысленность, отбрось искушение угадать.
    Должен существовать один - и, желательно, только один – очевидный способ сделать что-то.
    Хотя этот способ поначалу может быть и не очевиден, если вы не голландец.
    Сейчас лучше, чем никогда.
    Хотя никогда часто лучше, чем *прямо* сейчас.
    Если реализацию сложно объяснить – идея точно плоха.
    Если реализацию легко объяснить – возможно, идея хороша.
    Пространства имен – отличная штука! Будем использовать их чаще!
"""

# round(a, b) - округление числа a до b знаков после запятой
# b может быть отрицательным - тогда округление будет до десятков, сотен и т.д.

print(round(2.123456789, 3))
print(round(11010100, -4))

# округление через формат
print(f'{2.123456789:.3f}')

# Сравнение строк
# Строки сравниваются посимвольно по индексу символа в таблице ASCII
# Сравнение идет слева направо
